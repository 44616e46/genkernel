#!/bin/bash
# $Id$

PATH="${PATH}:/sbin:/usr/sbin"
GK_V='4.0.0_alpha.1'

# Set the default for TMPDIR. May be modified by genkernel.conf or the
# --tempdir command line option.
TMPDIR='/var/tmp/genkernel'

TODEBUGCACHE=yes # Until an error occurs or LOGFILE is fully qualified.

small_die() {
	echo "ERROR: $*" >&2
	exit 1
}

# We don't know where our config is, so we check for it, and default to using
# /etc/genkernel.conf if nobody has specified one.

# NOTE: We are look for --config=... in a way that doesn't modify $@ since we access that again, later
for arg in "$@"
do
	[[ "${arg}" == --config=* ]] && CMD_GK_CONFIG=${arg#--config=}
done

# Pull in our configuration
_GENKERNEL_CONF=${CMD_GK_CONFIG:-/etc/genkernel.conf}
source "${_GENKERNEL_CONF}" || small_die "Could not read ${_GENKERNEL_CONF}"

if [ -z "${GK_SHARE}" ]
then
	small_die "GK_SHARE is not set. Please check used genkernel config file at '${_GENKERNEL_CONF}'!"
fi

# set default LOGLEVEL if uninitialized
LOGLEVEL=${LOGLEVEL:-1}

# Start sourcing other scripts
source "${GK_SHARE}"/defaults/software.sh || small_die "Could not read '${GK_SHARE}/defaults/software.sh'"
source "${GK_SHARE}"/defaults/config.sh || small_die "Could not read '${GK_SHARE}/defaults/config.sh'"
source "${GK_SHARE}"/gen_funcs.sh || small_die "Could not read '${GK_SHARE}/gen_funcs.sh'"
source "${GK_SHARE}"/gen_cmdline.sh || gen_die "Could not read '${GK_SHARE}/gen_cmdline.sh'"
source "${GK_SHARE}"/gen_arch.sh || gen_die "Could not read '${GK_SHARE}/gen_arch.sh'"
source "${GK_SHARE}"/gen_determineargs.sh || gen_die "Could not read '${GK_SHARE}/gen_determineargs.sh'"
source "${GK_SHARE}"/gen_compile.sh || gen_die "Could not read '${GK_SHARE}/gen_compile.sh'"
source "${GK_SHARE}"/gen_configkernel.sh || gen_die "Could not read '${GK_SHARE}/gen_configkernel.sh'"
source "${GK_SHARE}"/gen_initramfs.sh || gen_die "Could not read '${GK_SHARE}/gen_initramfs.sh'"
source "${GK_SHARE}"/gen_moddeps.sh || gen_die "Could not read '${GK_SHARE}/gen_moddeps.sh'"
source "${GK_SHARE}"/gen_package.sh || gen_die "Could not read '${GK_SHARE}/gen_package.sh'"
source "${GK_SHARE}"/gen_bootloader.sh || gen_die "Could not read '${GK_SHARE}/gen_bootloader.sh'"

if [ ! -d "${TMPDIR}" ]
then
	mkdir -p "${TMPDIR}" || gen_die "Failed to create '${TMPDIR}'!"
fi

TEMP=$(mktemp -d -p "${TMPDIR}" gk.XXXXXXXX 2>/dev/null)
[ -z "${TEMP}" ] && gen_die "mktemp failed!"

export GK_MASTER_PID=${BASHPID}

set_default_gk_trap

BUILD_KERNEL="no"
BUILD_RAMDISK="no"
BUILD_MODULES="no"

# Parse all command line options...
GK_OPTIONS=$* # Save for later
while [ $# -gt 0 ]
do
	GK_OPTION=$1; shift
	parse_cmdline ${GK_OPTION}
done
unset GK_OPTION

# Check if no action is specified...
if ! isTrue "${BUILD_KERNEL}" && ! isTrue "${BUILD_RAMDISK}"
then
	usage
	exit 1
fi

start_log
NORMAL=${GOOD} print_info 1 "Gentoo Linux Genkernel; Version ${GK_V}${NORMAL}"
print_info 1 "Using genkernel configuration from '${_GENKERNEL_CONF}' ..."
unset _GENKERNEL_CONF
print_info 1 "Running with options: ${GK_OPTIONS}"
echo

# Save any customizations of MODULES_* first.
override_module_vars="$(compgen -A variable |grep '^MODULES_')"
for v in ${override_module_vars}
do
	print_info 2 "Saving ${v} to override defaults"
	newvar=override_${v}
	eval "${newvar}='${!v}'"
done

determine_real_args

print_info 2 "Sourcing default modules_load from '${GK_SHARE}/defaults/modules_load' ..."
source "${GK_SHARE}/defaults/modules_load" || gen_die "Could not read '${GK_SHARE}/defaults/modules_load'!"

# Read arch-specific config
print_info 2 "Sourcing arch-specific config.sh from '${ARCH_CONFIG}' ..."
source "${ARCH_CONFIG}" || gen_die "Could not read '${ARCH_CONFIG}'!"
_MODULES_LOAD="${GK_SHARE}/arch/${ARCH}/modules_load"
if [ -f "${_MODULES_LOAD}" ]
then
	print_info 2 "Sourcing arch-specific modules_load from '${_MODULES_LOAD}' ..."
	source "${_MODULES_LOAD}" || gen_die "Could not read '${_MODULES_LOAD}'!"
else
	print_info 2 "No arch-specific modules_load found; Skipping ..."
fi
unset _MODULES_LOAD

# Now apply customizations of MODULES_*
for v in ${override_module_vars}
do
	newvar=override_${v}
	print_info 2 "Override $v, default (${!v}), new value (${!newvar})"
	eval "${v}='${!newvar}'"
done
unset v override_module_vars

# Merge additional modules_load from config
for group_modules in ${!AMODULES_*}
do
	group="$(echo ${group_modules} | cut -d_ -f2)"
	eval cmodules="\$${group_modules}"
	eval MODULES_${group}=\"\${MODULES_${group}} ${cmodules}\"
	print_info 2 "<config> Merged AMODULES_${group}:'${cmodules}' into MODULES_${group}"
done
unset group group_modules

determine_KV
# $KV is now either set to the version from previous compilation,
# which would include LOCALVERSION suffix, or initialized with
# unmodified KERNEL_SOURCE version (which normally has no LOCALVERSION set).

determine_kernel_arch

determine_kernel_config_file

setup_cache_dir

check_distfiles

dump_debugcache

KERNCACHE_IS_VALID="no"
if [ -n "${KERNCACHE}" ]
then
	gen_kerncache_is_valid
fi

print_info 1 "Working with Linux kernel ${BOLD}${KV}${NORMAL} for ${BOLD}${ARCH}${NORMAL}"
print_info 1 "Using kernel config file '${KERNEL_CONFIG}' ..."

if isTrue "${BUILD_KERNEL}" && ! isTrue "${KERNCACHE_IS_VALID}"
then
	print_info 1 ""
	print_info 1 "Note: The version above is subject to change (depends on config and status of kernel sources)."
	print_info 1 ""
fi

# Check if BOOTDIR is mounted
if ! isTrue "${CMD_INSTALL}"
then
	isTrue "${MOUNTBOOT}" && print_info 2 'Skipping automatic mount of boot'
else
	[[ -d ${BOOTDIR} ]] || gen_die "${BOOTDIR} is not a directory"

	if ! egrep -q "[[:space:]]${BOOTDIR}[[:space:]]" /proc/mounts
	then
		if egrep -q "^[^#].+[[:space:]]${BOOTDIR}[[:space:]]" /etc/fstab
		then
			if isTrue "${MOUNTBOOT}"
			then
				if ! mount ${BOOTDIR}
				then
					print_warning 1 "${BOLD}WARNING${NORMAL}: Failed to mount ${BOOTDIR}!"
					echo
				else
					print_info 1 "mount: ${BOOTDIR} mounted successfully!"
				fi
			else
				print_warning 1 "${BOLD}WARNING${NORMAL}: No mounted ${BOOTDIR} partition detected!"
				print_warning 1 "$(get_indent 1)Run ``mount ${BOOTDIR}`` to mount it!"
				echo
			fi
		fi
	elif is_boot_ro
	then
		if isTrue "${MOUNTBOOT}"
		then
			if ! mount -o remount,rw ${BOOTDIR}
			then
				print_warning 1 "${BOLD}WARNING${NORMAL}: Failed to remount ${BOOTDIR} RW!"
				echo
			else
				print_info 1 "mount: ${BOOTDIR} remounted read/write successfully!"
				BOOTRW="yes"
			fi
		fi
	fi
fi

if isTrue "${BUILD_KERNEL}" && ! isTrue "${KERNCACHE_IS_VALID}"
then
	# Configure kernel
	config_kernel

	# Make prepare
	if ! isTrue "${ARCH_HAVENOPREPARE}"
	then
		compile_generic prepare kernel
	else
		print_info 2 "$(get_indent 1)>> Skipping 'make prepare' due to ARCH_HAVENOPREPARE=yes!"
	fi

	# KV may have changed due to the configuration
	determine_KV
	if [ -f "${TEMP}/.old_kv" ]
	then
		old_KV=$(cat "${TEMP}/.old_kv")
		print_info 1 "$(get_indent 1)>> Kernel version has changed (probably due to config change) since genkernel start:"
		print_info 1 "$(get_indent 1)>> We are now building Linux kernel ${BOLD}${KV}${NORMAL} for ${BOLD}${ARCH}${NORMAL} ..."
	else
		print_info 2 "$(get_indent 1)>> Kernel version has not changed since genkernel start."
	fi

	compile_kernel

	# Compile modules
	if isTrue "${BUILD_MODULES}" && ! isTrue "${BUILD_STATIC}"
	then
		compile_modules
	fi

	if isTrue "${SAVE_CONFIG}"
	then
		print_info 1 "$(get_indent 1)>> Saving config of successful build to '/etc/kernels/kernel-config-${ARCH}-${KV}' ..."
		[ ! -e '/etc/kernels' ] && mkdir -p /etc/kernels
		cp "${KERNEL_OUTPUTDIR}/.config" "/etc/kernels/kernel-config-${ARCH}-${KV}" || \
			print_warning 1 "Unable to copy the kernel configuration file; Ignoring non-fatal error ..."
			# Just a warning because ordinary users are not allowed to write in /etc
	fi
fi

if isTrue "${CMD_INSTALL}"
then
	if isTrue "${KERNCACHE_IS_VALID}"
	then
		gen_kerncache_extract_kernel
	fi
fi

if isTrue "${KERNCACHE_IS_VALID}"
then
	! isTrue "${BUILD_STATIC}" && gen_kerncache_extract_modules
	gen_kerncache_extract_config
fi

# Run callback
if [ -n "${CMD_CALLBACK}" ]
then
	print_info 1 "" 1 0
	print_info 1 "Preparing to run callback: \"${CMD_CALLBACK}\"" 0

	CALLBACK_ESCAPE=0
	CALLBACK_COUNT=0

	trap "CALLBACK_ESCAPE=1" TERM KILL INT QUIT ABRT
	while [[ "${CALLBACK_ESCAPE}" -eq 0 && ${CALLBACK_COUNT} -lt 5 ]]
	do
		sleep 1; printf '.';
		let CALLBACK_COUNT=${CALLBACK_COUNT}+1
	done

	if [ "${CALLBACK_ESCAPE}" -eq 0 ]
	then
		echo
		echo
		eval ${CMD_CALLBACK} | tee -a "${LOGFILE}"
		CMD_STATUS="${PIPESTATUS[0]}"
		echo
		print_info 1 "<<< Callback exit status: ${CMD_STATUS}"
		[ "${CMD_STATUS}" -ne 0 ] && gen_die '--callback failed!'
	else
		echo
		print_info 1 ">>> Callback cancelled ..."
	fi

	# restore default trap
	set_default_gk_trap
fi

if isTrue "${BUILD_RAMDISK}"
then
	print_info 1 ''

	# Compile initramfs
	create_initramfs
else
	print_info 1 ''
	print_info 1 "initramfs: >> Not building since only the kernel was requested ..."
fi

if isTrue "${INTEGRATED_INITRAMFS}"
then
	print_info 1 ''

	# We build the kernel a second time to include the initramfs
	compile_kernel
fi

if [ -n "${KERNCACHE}" ]
then
	if ! isTrue "${KERNCACHE_IS_VALID}"
	then
		# Only update KERNCACHE when KERNCACHE wasn't used because
		# when it was used nothing has been changed so no update is
		# necessary.
		gen_kerncache
	else
		print_info 3 "Kerncache was used and kernel/modules therefore didn't change; Skipping '${KERNCACHE}' generation ..."
	fi
fi

[ -n "${MINKERNPACKAGE}" ] && gen_minkernpackage
[ -n "${MODULESPACKAGE}" ] && gen_modulespackage

if isTrue "${BUILD_KERNEL}"
then
	show_warning_initramfs_is_required=yes

	print_info 1 ''
	print_info 1 'Kernel compiled successfully!'

	if isTrue "${CMD_INSTALL}"
	then
		set_bootloader

		# When we have installed kernel and initramfs *and*
		# updated bootloader, we can assume that initramfs will
		# be used...
		case "${BOOTLOADER}" in
			grub)
				show_warning_initramfs_is_required=no
				;;
			grub2)
				show_warning_initramfs_is_required=no
				;;
		esac
	else
		print_info 1 ''
		print_info 1 "You will find the kernel image in '${TMPDIR}/kernel-${KNAME}-${ARCH}-${KV}'."
		if isTrue "${GENZIMAGE}"
		then
			print_info 1 "You will find the kernelz binary in '${TMPDIR}/kernelz-${KV}'."
		fi
		print_info 1 "You will find the initramfs in '${TMPDIR}/initramfs-${KNAME}-${ARCH}-${KV}'."
	fi

	print_info 1 ''
	print_info 1 'Required kernel parameter:'
	print_info 1 ''
	print_info 1 '	root=/dev/$ROOT'
	print_info 1 ''
	print_info 1 'Where $ROOT is the device node for your root partition as the'
	print_info 1 'one specified in /etc/fstab'

	if isTrue "${show_warning_initramfs_is_required}"
	then
		echo
		print_warning 1 "If you require Genkernel's hardware detection features, you ${BOLD}MUST${NORMAL}"
		print_warning 1 'tell your bootloader to use the provided initramfs file.'
	fi
	unset show_warning_initramfs_is_required
fi

if isTrue "${BUILD_RAMDISK}"
then
	echo
	print_warning 1 "${BOLD}WARNING... WARNING... WARNING...${NORMAL}"
	print_warning 1 'Additional kernel parameters that *may* be required to boot properly:'
	isTrue "${SPLASH}"    && print_warning 1 "- Add \"vga=791 splash=silent,theme:${SPLASH_THEME} console=tty1 quiet\" if you use a splash framebuffer ]"
	isTrue "${BCACHE}"    && print_warning 1 '- Add "dobcache" for bcache support'
	isTrue "${BTRFS}"     && print_warning 1 '- Add "dobtrfs" for Btrfs device scanning support'
	isTrue "${MULTIPATH}" && print_warning 1 '- Add "domultipath" for multipath support'
	isTrue "${ISCSI}"     && print_warning 1 '- For iSCSI support, add at least:'
	isTrue "${ISCSI}"     && print_warning 1 '	- "iscsi_initiatorname=<initiator name>"'
	isTrue "${ISCSI}"     && print_warning 1 '	- "iscsi_target=<target name>"'
	isTrue "${ISCSI}"     && print_warning 1 '	- "iscsi_address=<target ip>"'
	isTrue "${DMRAID}"    && print_warning 1 '- Add "dodmraid" for dmraid support or "dodmraid=<additional options>"'
	isTrue "${MDADM}"     && print_warning 1 '- Add "domdadm" for MDRAID support'
	isTrue "${LVM}"       && print_warning 1 '- Add "dolvm" for LVM support'
	isTrue "${SSH}"       && print_warning 1 '- Add "dosshd" to start SSH daemon in initramfs'

	if isTrue "${ZFS}"
	then
		print_warning 1 '- Add "dozfs" for ZFS volume management support'
		print_warning 1 '  and either "root=ZFS" to use bootfs autodetection or "root=ZFS=<dataset>"'
		print_warning 1 '  to force booting from a specific dataset'
		print_warning 1 ''
		if [ -f "${TEMP}/.embedded_hostid" ]
		then
			saved_hostid=$(cat "${TEMP}/.embedded_hostid")
			print_warning 1 "Hostid '${saved_hostid}' is embedded into initramfs."
			print_warning 1 "If you will use this initramfs for a different system you MUST set 'spl_hostid=<hostid>' parameter to overwrite embedded hostid!"
			unset saved_hostid
		else
			print_warning 1 "No hostid embedded into initramfs. You MUST set 'spl_hostid=<hostid>' parameter to provide hostid for ZFS!"
		fi
		print_warning 1 ''
		print_warning 1 'If importing ZFS pool is slow, add dozfs=cache or dozfs=force to kernel commandline.'
		print_warning 1 '"man genkernel" explains "dozfs" in detail.'
	fi

	if [[ "$(file --brief --mime-type "${KERNEL_CONFIG}")" == application/x-gzip ]]
	then
		# Support --kernel-config=/proc/config.gz, mainly
		CONFGREP=zgrep
	else
		CONFGREP=grep
	fi

	if [ $(${CONFGREP} 'CONFIG_EXT[0-9]_FS=' "${KERNEL_CONFIG}" | wc -l) -ge 2 ]
	then
		print_warning 1 ''
		print_warning 1 'With support for several ext* filesystems available, it may be needed to'
		print_warning 1 'add "rootfstype=ext3" or "rootfstype=ext4" to the list of boot parameters.'
	fi

	unset CONFGREP
fi

isTrue "${BOOTRW}" && mount -o remount,ro ${BOOTDIR}

echo
print_info 1 'Do NOT report kernel bugs as genkernel bugs unless your bug'
print_info 1 'is about the default genkernel configuration...'
print_info 1 ''
print_info 1 'Make sure you have the latest ~arch genkernel before reporting bugs.'

# Final Cleanup
cleanup
